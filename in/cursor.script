--- Refer to cursor.md for documentation

go.property("action_id", hash("touch"))
go.property("drag", true)
go.property("drag_threshold", 20)
go.property("acquire_input_focus", false)
go.property("notify_own_gameobject", true)

local COLLISION_RESPONSE = hash("collision_response")
local INPUT = hash("input")

local function handle_input(self, action_id, action)
	if not action_id or action_id == self.action_id then
		go.set_position(vmath.vector3(action.x, action.y, 0))

		if action.pressed then
			self.pressed = true
		elseif action.released then
			self.released = true
		end
	end
end

function init(self)
	if self.acquire_input_focus then
		msg.post(".", "acquire_input_focus")
	end

	self.collision_id = nil
	self.pressed = false
	self.released = false

	self.state = {
		pressed = false,
		dragging = false,
		over_id = nil,
	}
end

local function notify_event(self, game_object_id, message_id)
	-- pcall to catch errors when posting to a game object that might have been deleted
	-- typically a cursor_out message that is generated when the game object is deleted
	pcall(function()
		if self.notify_own_gameobject then
			msg.post(".", message_id, { id = game_object_id })
		end
		msg.post(game_object_id, message_id)
	end)
end

function update(self, dt)
	local pos = go.get_position()

	if self.released and self.state.pressed then
		if self.state.dragging then
			self.state.dragging = false
			notify_event(self, self.state.pressed_id, "drag_end")
		end
		notify_event(self, self.state.pressed_id, "released")
		self.state.pressed = false
		self.state.pressed_id = nil
	end

	if self.state.over_id and self.state.over_id ~= self.collision_id then
		notify_event(self, self.state.over_id, "cursor_out")
		self.state.over_id = nil
	end

	if self.collision_id and self.state.over_id ~= self.collision_id then
		self.state.over_id = self.collision_id
		notify_event(self, self.state.over_id, "cursor_over")
	end

	if self.pressed and not self.state.pressed and self.state.over_id then
		self.state.pressed = true
		self.state.pressed_id = self.state.over_id
		self.state.pressed_pos = go.get_position()
		notify_event(self, self.state.pressed_id, "pressed")
	end

	if self.drag and self.state.pressed and not self.state.dragging then
		local distance = vmath.length(pos - self.state.pressed_pos)
		if distance >= self.drag_threshold then
			self.state.dragging = true
			notify_event(self, self.state.pressed_id, "drag_start")
		end
	end

	if self.state.dragging then
		go.set_position(pos, self.state.pressed_id)
	end

	self.collision_id = nil
	self.pressed = false
	self.released = false
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if not self.collision_id or go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
		end
	elseif message_id == INPUT then
		handle_input(self, message.action_id, message.action)
	end
end

function on_input(self, action_id, action)
	-- we should only care about calls to on_input if we have specifically acquired input focus
	-- if we haven't acquired input focus it is expected that input is sent via on_message from
	-- some other script
	if self.acquire_input_focus then
		handle_input(self, action_id, action)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
